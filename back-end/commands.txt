//Comandos para gerar model + migration
npx sequelize-cli model:generate --name User --attributes name:string,email:string,verified_email:boolean,is_admin:boolean,phone:string,password:string

npx sequelize-cli model:generate --name Channel --attributes description:string,commission_fee:decimal


//Comando para criar a tabela la no banco de dados do clever cloud
npx sequelize-cli db:migrate

//Comando para apagar a tabela la no banco de dados do clever cloud
npx sequelize-cli db:migrate:undo


npx sequelize-cli model:generate --name City --attributes name:string,state:char

1. Crie a migration e o model para a tabela (nome com Iniciais maiusculas e sem underline)
npx sequelize-cli model:generate --name CustomerTag --attributes description:string,commission_fee:decimal
npx sequelize-cli model:generate --name Order --attributes external_code:string,theme:string,description:text,remarks:text,pic_url:string,custom_name:string,custom_age:tinyint,order_date:date,event_date:date,atwork_date:date,shipment_date:date,total_amount:decimal,customer_id:integer,channel_id:integer,carrier_id:integer,shipment_priority_id:integer,payment_method_id:integer

2. Ajustar a migration
     * nome da tabela em snake_case, no plural, no up() e no down()
     * ajustar os tipos de dados, de acordo com o diagrama  DECIMAL(18,2)
     * acrescente "allowNull: false", se necessário

3. Executar a migration: npx sequelize-cli db:migrate
4. Copiar as definições de campos da migration (exceto createdAt e updatedAt) e colar a definição dos campos no model,
     substituindo as definições já existentes
5. --NO MODEL-- Substitua todos os termos Sequelize por DataTypes, usando Ctrl + H, (respeitando maiúsculas e minúsculas)
6. Renomeie o arquivo do model para snake_case, se o nome for composto por mais de uma palavra
8. Abaixo da propriedade modelName, adicione a propriedade  tableName com o nome da tabela entre aspas e em snake_case, plural
9. Duplique um controller existente e o renomeie de forma identica ao model que lhe será correspondente
10. No arquivo do controller, substitua (Ctrl+H) todas as ocorrências do nome do model (que está em PascalCase)
     para o nome do model atual, respeitando a distinção entre letras maiúsculas e minúsculas.
11. Duplique um route existente e o renomeie com o nome do model correspondente em snake_case, no plural
12. Renomeie o nome do controller no arquivo route
13. No arquivo app.js, acrescente a rota correspondente. Observe que:
     * Caso o nome do route seja composto por mais de uma palavra, a constante deve serdeclarada usando a convenção camelCase, no plural;
     *A mesma constante declarada no passo anterior corresponde ao segundo parâmetroda função app.use().
14. Npm start e faça os testes no Thunder Client.



Comando para gerar apenas uma migration (sem model)
npx sequelize-cli migration:generate --name alter-table-users


------------------------------------------------------------------
Criar chaves estrangeiras
1 - Execute -----npx sequelize-cli migration:generate --name alter-table-customers

2 - Acrescente no up()
    await queryInterface.addConstraint('customers', {
     fields: ['city_id'],   //Nome do campo desta tabela que sera atribuida a foreign key
     type: 'foreign key',
     name: 'customers_cities_fk',  //Nome da chave estrangeira(deve ser unico no BD)
     references: {
          table: 'cities',  //Tabela que sera herdada a chave
          field: 'id'       //Campo que sera usado da outra tabela
     },
     onDelete: 'RESTRICT',   //Não deixa apagar uma city em uso na customer
     onUpdate: 'CASCADE'     //Atualiza city_id em customer se id em city mudar
    })



    -----Acrescente no down()
    await queryInterface.removeConstraint('customers', 'customers_cities_fk')
  


3 - Execute ---- npx sequelize-cli db:migrate


4 - Va nos models das tabelas e adicione no associate()

this.belongsTo(models.City, {  //Nome da outra tabela
     foreignKey: 'city_id',     //Nome do campo de associação nesta tabela
     targetKey: 'id',           //Nome do campo de id da outra tabela
     as: 'city'                 //Nome do atributo para exibição
})



this.hasMany(models.Customer, { //Nome da tabela associada
        foreignKey: 'city_id',  //Campo que sera associado na outra tabela
        sourceKey: 'id',        //Campo da tabela local
        as: 'customers'         //Nome do campo de associação(plural)
      })



this.belongsToMany(models.Tag, {
        through: 'customer_tags',    //Tabela intermediaria
        foreignKey: 'customer_id',   //Chave estrangeira da tabela intermediária
        otherKey: 'tag_id',          //Outra chave da tabela intermediaria
        as: 'tags'                   //Nome do campo de associação (plural)
      })

-----------------------------------------------------------------

5 - Alteração no controller da tabela que esta sendo criada a FK

acrescente City no nome da const

No controller.retrieve
const data = await Customer.findAll({
     include: {model: City, as: 'city'}
})
     


------------------------------------------------------------------------------------------------------

SEGURANÇA DA API

1 - Não retornar password na listagem de users

     ----------No model do user, acrescentar após o table name:

          defaultScope:{
      attributes:{
        exclude: ['password']
      }
    },
    //Inclui o campo "password" (necessário no login)
    withPassword: {
      attributes: {
        include: ['password']
      }
    }

    


2 - Criptografar password ao criar e atualizar users

      ------Executar npm i bcrypt jsonwebtoken
     -------Executar npm audit fix --force

     ------------Adicionar no controller do user 
     
     const bcrypt = require('bcrypt')
     const jwt = require('jsonwebtoken')

     -----------Adicionar no controller.create do user dentro de try:

      req.body.password = await bcrypt.hash(req.body.password, 12)

      ----------Adicione no controller.update do user, dentro do try:
      if(req.body.password){
            req.body.password = await bcrypt.hash(req.body.password, 12)
        }




3 - Implementar logincom JWT + cookie

     ----------No controller do user adicione o controller.login:

     controller.login = async (req, res) => {
  try {
    const user = await User.scope('withPassword').findOne({ where: { email: req.body.email } })

    // Usuário não encontrado ~> HTTP 401: Unauthorized
    if(!user) return res.status(401).end()

    const pwMatches = await bcrypt.compare(req.body.password, user.password)

    if(pwMatches) {
      // A senha confere
      const token = jwt.sign({
          id: user.id,
          name: user.name,
          email: user.email,
          verified_email: user.verified_email,
          is_admin: user.is_admin,
          phone: user.phone
        },
        process.env.TOKEN_SECRET,    // Chave para criptografar o token
        { expiresIn: '24h' }         // Duração do token
      )

      // Retorna o token ~> HTTP 200: OK (implícito)
      res.json({ auth: true, token })
    }
    else {
      // Senha errada ~> HTTP 401: Unauthorized
      res.status(401).end()
    }
  }
  catch(error) {
    console.error(error)
  }
}
          
----------Adicione no .env.example 

     TOKEN_SECRET=

----------Adicione no .env

     TOKEN_SECRET=Batatinha1QuandoNasce2




4 - Implementar rotas seguras

-------Adicione no route do User

router.post('/login', controller.login)

---------------------------------------------------------------------------------


criar novo projeto front-end 
------Execute - npm create vite@latest front-end

Execute -------cd front-end
Execute -------npm install

No package json coloque --host


Execute -------npm run dev

DE Crtr + c

Execute--------npm i react-router-dom




----------------------------------------------------------------------------------

CORS

---------Execute  npm i cors

Em app.js adicione abaixo do express():

const cors = require('cors')
app.use(cors())


---------------------------------------------------------------------------------------
{
    "external_code": "Franca",
    "theme": "hghgh",
    "description": "jfjfjf",
    "remarks": "ghghgh",
    "pic_url": "hghhh",
    "custom_name": "Franca",
    "custom_age": "44",
    "order_date": "",
    "event_date": "",
    "atwork_date": "",
    "shipment_date": "",
    "total_amount": "1.55",
    "customer_id": "1",
    "channel_id": "1",
    "carrier_id": "1",
    "shipment_priority_id": "1",
    "payment_method_id": "1"
}


npx sequelize-cli model:generate --name Products --attributes description:string,quantity:decimal,unit:enum,supllier:integer
