//Comandos para gerar model + migration
npx sequelize-cli model:generate --name User --attributes name:string,email:string,verified_email:boolean,is_admin:boolean,phone:string,password:string

npx sequelize-cli model:generate --name Channel --attributes description:string,commission_fee:decimal


//Comando para criar a tabela la no banco de dados do clever cloud
npx sequelize-cli db:migrate

//Comando para apagar a tabela la no banco de dados do clever cloud
npx sequelize-cli db:migrate:undo

npx sequelize-cli model:generate --name PaymentMethod --attributes description:string,operator_fee:decimal




1. Crie a migration e o model para a tabela (nome com Iniciais maiusculas e sem underline)
npx sequelize-cli model:generate --name Tag --attributes id:integer,description:string,commission_fee:decimal

2. Ajustar a migration
     * nome da tabela em snake_case, no plural, no up() e no down()
     * ajustar os tipos de dados, de acordo com o diagrama  DECIMAL(18,2)
     * acrescente "allowNull: false", se necessário

3. Executar a migration: npx sequelize-cli db:migrate
4. Copiar as definições de campos da migration (exceto createdAt e updatedAt) e colar a definição dos campos no model,
     substituindo as definições já existentes
5. Substitua todos os termos Sequelize por DataTypes, usando Ctrl + H, (respeitando maiúsculas e minúsculas)
6. Renomeie o arquivo do model para snake_case, se o nome for composto por mais de uma palavra
8. Abaixo da propriedade modelName, adicione a propriedade  tableName com o nome da tabela entre aspas e em snake_case, plural
9. Duplique um controller existente e o renomeie de forma identica ao model que lhe será correspondente
10. No arquivo do controller, substitua (Ctrl+H) todas as ocorrências do nome do model (que está em  PascalCase)
     para o nome do model atual, respeitando a distinção entre letras maiúsculas e minúsculas.
11. Duplique um route existente e o renomeie com o nome do model correspondente em snake_case, no plural
12. Renomeie o nome do controller no arquivo route
13. No arquivo app.js, acrescente a rota correspondente. Observe que:
     * Caso o nome do route seja composto por mais de uma palavra, a constante deve serdeclarada usando a convenção camelCase;
     *A mesma constante declarada no passo anterior corresponde ao segundo parâmetroda função app.use().
14. Npm start e faça os testes no Thunder Client.



Comando para gerar apenas uma migration (sem model)
npx sequelize-cli migration:generate --name alter-table-users


------------------------------------------------------------------
Após criação das tabelas
npx sequelize-cli migration:generate --name alter-table-customers

'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    /**
     * Add altering commands here.
     *
     * Example:
     * await queryInterface.createTable('users', { id: Sequelize.INTEGER });
     */

    //Cria a chave estrangeira da tabela customers para a tabela cities
    await queryInterface.addConstraint('customers', {
     fields: ['city_id'],   //Campo da tabela de origem
     type: 'foreign key'
     name: 'customers_cities_fk',  //Nome da chave estrangeira(deve ser unico no BD)
     references: {
          table: 'cities',  //Tabela estrangeira
          field: 'id'       //Campo da tabela estrangeira
     },
     onDelete: 'RESTRICT',   //Não deixa apagar uma city em uso na customer
     onUpdate: 'CASCADE'     //Atualiza city_id em customer se id em city mudar
    })
  },

  async down (queryInterface, Sequelize) {
    /**
     * Add reverting commands here.
     *
     * Example:
     * await queryInterface.dropTable('users');
     */

    //Reverte as alterações feitas no up()
    await queryInterface.removeConstraint('customers', 'customers_cities_fk')
  }
};


---------Execute npx sequelize-cli db:migrate
---------No Thunder Client, crie as cidades Franca e Claraval na tabela cities
---------Crie um cliente na tabela customers

---------Va no model do customers e adicione no associate()

this.belongsTo(models.City, {
     foreignKey: 'city_id',     //Nome do campo na tabela de origem
     targetKey: 'id',           //Nome do campo na tabela de destino
     as: 'city'                 //Nome do atributo para exibição
})

-----------------------------------------------------------------

Alteração no controller do customer

acrescente City no nome da const

No controller.retrieve
const data = await Customer.findAll(
     include: {model: City, as: 'city'}
)