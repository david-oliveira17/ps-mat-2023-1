//Comandos para gerar model + migration
npx sequelize-cli model:generate --name User --attributes name:string,email:string,verified_email:boolean,is_admin:boolean,phone:string,password:string

npx sequelize-cli model:generate --name Channel --attributes description:string,commission_fee:decimal


//Comando para criar a tabela la no banco de dados do clever cloud
npx sequelize-cli db:migrate

//Comando para apagar a tabela la no banco de dados do clever cloud
npx sequelize-cli db:migrate:undo


npx sequelize-cli model:generate --name City --attributes name:string,state:char

1. Crie a migration e o model para a tabela (nome com Iniciais maiusculas e sem underline)
npx sequelize-cli model:generate --name CustomerTag --attributes description:string,commission_fee:decimal
npx sequelize-cli model:generate --name Order --attributes external_code:string,theme:string,description:text,remarks:text,pic_url:string,custom_name:string,custom_age:tinyint,order_date:date,event_date:date,atwork_date:date,shipment_date:date,total_amount:decimal,customer_id:integer,channel_id:integer,carrier_id:integer,shipment_priority_id:integer,payment_method_id:integer

2. Ajustar a migration
     * nome da tabela em snake_case, no plural, no up() e no down()
     * ajustar os tipos de dados, de acordo com o diagrama  DECIMAL(18,2)
     * acrescente "allowNull: false", se necessário

3. Executar a migration: npx sequelize-cli db:migrate
4. Copiar as definições de campos da migration (exceto createdAt e updatedAt) e colar a definição dos campos no model,
     substituindo as definições já existentes
5. --NO MODEL-- Substitua todos os termos Sequelize por DataTypes, usando Ctrl + H, (respeitando maiúsculas e minúsculas)
6. Renomeie o arquivo do model para snake_case, se o nome for composto por mais de uma palavra
8. Abaixo da propriedade modelName, adicione a propriedade  tableName com o nome da tabela entre aspas e em snake_case, plural
9. Duplique um controller existente e o renomeie de forma identica ao model que lhe será correspondente
10. No arquivo do controller, substitua (Ctrl+H) todas as ocorrências do nome do model (que está em PascalCase)
     para o nome do model atual, respeitando a distinção entre letras maiúsculas e minúsculas.
11. Duplique um route existente e o renomeie com o nome do model correspondente em snake_case, no plural
12. Renomeie o nome do controller no arquivo route
13. No arquivo app.js, acrescente a rota correspondente. Observe que:
     * Caso o nome do route seja composto por mais de uma palavra, a constante deve serdeclarada usando a convenção camelCase, no plural;
     *A mesma constante declarada no passo anterior corresponde ao segundo parâmetroda função app.use().
14. Npm start e faça os testes no Thunder Client.



Comando para gerar apenas uma migration (sem model)
npx sequelize-cli migration:generate --name alter-table-users


------------------------------------------------------------------
Criar chaves estrangeiras
npx sequelize-cli migration:generate --name alter-table-customers

     -----Acrescente no up()
    await queryInterface.addConstraint('customers', {
     fields: ['city_id'],   //Campo da tabela de origem
     type: 'foreign key',
     name: 'customers_cities_fk',  //Nome da chave estrangeira(deve ser unico no BD)
     references: {
          table: 'cities',  //Tabela estrangeira
          field: 'id'       //Campo da tabela estrangeira
     },
     onDelete: 'RESTRICT',   //Não deixa apagar uma city em uso na customer
     onUpdate: 'CASCADE'     //Atualiza city_id em customer se id em city mudar
    })



    -----Acrescente no down()
    await queryInterface.removeConstraint('customers', 'customers_cities_fk')
  


---------Execute ---- npx sequelize-cli db:migrate


---------Va no model da tabela e adicione no associate()

this.belongsTo(models.City, {
     foreignKey: 'city_id',     //Nome do campo na tabela de origem
     targetKey: 'id',           //Nome do campo na tabela de destino
     as: 'city'                 //Nome do atributo para exibição
})


this.belongsToMany(models.Tag, {
        through: 'customer_tags',    //Tabela intermediaria
        foreignKey: 'customer_id',   //Chave estrangeira da tabela intermediária
        otherKey: 'tag_id',          //Outra chave da tabela intermediaria
        as: 'tags'                   //Nome do campo de associação (plural)
      })

-----------------------------------------------------------------

Alteração no controller do customer

acrescente City no nome da const

No controller.retrieve
const data = await Customer.findAll({
     include: {model: City, as: 'city'}
})
     





{
    "external_code": "Franca",
    "theme": "hghgh",
    "description": "jfjfjf",
    "remarks": "ghghgh",
    "pic_url": "hghhh",
    "custom_name": "Franca",
    "custom_age": "44",
    "order_date": "",
    "event_date": "",
    "atwork_date": "",
    "shipment_date": "",
    "total_amount": "1.55",
    "customer_id": "1",
    "channel_id": "1",
    "carrier_id": "1",
    "shipment_priority_id": "1",
    "payment_method_id": "1"
}